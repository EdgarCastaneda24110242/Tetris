@startuml Tetris

!theme plain
skinparam backgroundColor white
skinparam classBackgroundColor #E6F3FF
skinparam classBorderColor #2E86AB
skinparam arrow {
    Color #2E86AB
}

title TETRIS - DIAGRAMA DE CLASES SIMPLIFICADO\nArquitectura Principal del Proyecto

class Juego {
    - ventana : Ventana
    - tablero : Tablero
    - piezaActual : Pieza*
    - proximaPieza : Pieza*
    - gameOver : bool
    - puntaje : int
    - nivel : int
    - musica : Musica
    __
    + Juego(ventanaPrincipal : sf::RenderWindow&)
    + Jugar() : void
    + CrearNuevaPieza() : void
    + MostrarMenuPrincipal() : void
    + MostrarRecords() : void
}

class Tablero {
    - ANCHO : int = 10
    - ALTO : int = 20
    - matriz : vector<vector<int>>
    __
    + Tablero()
    + VerificarColision(pieza : Pieza&) : bool
    + FijarPieza(pieza : Pieza&) : void
    + LimpiarLineas(ventana : sf::RenderWindow&) : int
}

class Pieza {
    - tipo : int
    - rotacion : int
    - x : int
    - y : int
    - forma : vector<vector<int>>
    __
    + Pieza(tipo : int)
    + Rotar() : void
}

class Ventana {
    - window : sf::RenderWindow*
    __
    + Ventana(ancho : int, alto : int, titulo : string)
    + VerificarSiEstaAbierta() : bool
    + Limpiar() : void
    + Mostrar() : void
    + ProcesarEvento(evento : sf::Event&) : bool
    + ObtenerVentana() : sf::RenderWindow&
}

class Musica {
    - musica : sf::Music
    __
    + Musica(rutaArchivo : string)
    + Reproducir() : void
    + Detener() : void
    + Pausar() : void
    + EstablecerVolumen(volumen : float) : void
}

class Audio {
    - musica : sf::Music
    __
    + Audio(rutaArchivo : string)
    + Reproducir() : void
    + VerificarSiEstaReproduciendo() : bool
    + EstablecerVolumen(volumen : float) : void
}

class Puntaje {
    - puntaje : int
    __
    + Puntaje()
    + AgregarPuntos(lineas : int) : void
    + CalcularPuntaje() : int
    + Reiniciar() : void
}

class GameOverScreen {
    - ventana : sf::RenderWindow&
    __
    + GameOverScreen(ventana : sf::RenderWindow&)
    + Mostrar() : void
}

class Controles {
    __
    + ProcesarEvento(evento : sf::Event&) : Accion
}

enum Accion {
    Ninguna
    MoverIzquierda
    MoverDerecha
    Bajar
    Rotar
    Salir
}

class TableroRender {
    __
    + DibujarFondo(...) : void
    + DibujarTablero(...) : void
    + DibujarPieza(...) : void
}

class FondoTablero {
    __
    + Dibujar(...) : void
}

class Bloque {
    __
    + Dibujar(...) : void
}

class ColorPieza {
    __
    + Obtener(tipo : int) : sf::Color
}

class Constantes {
    - BLOCK_SIZE : int = 30
    - WIN_WIDTH : int = 800
    - WIN_HEIGHT : int = 600
    - BOARD_OFFSET_X : int = 50
    - BOARD_OFFSET_Y : int = 50
    - SCALE : float = 1.0
}

class Tetris {
    - tablero : Tablero
    - piezaActual : Pieza*
    - gameOver : bool
    __
    + Tetris()
    + Jugar() : void
    + CrearNuevaPieza() : void
}

Juego *-- Tablero
Juego *-- Ventana
Juego *-- Musica
Tetris *-- Tablero
Juego o-- Pieza
Juego o-- GameOverScreen
Juego o-- Audio
Juego o-- Puntaje
Juego o-- Controles
Juego o-- ColorPieza
Tetris o-- Pieza
Tetris o-- Ventana
Tetris o-- Controles
Tetris o-- ColorPieza
Tetris o-- TableroRender
Tetris o-- FondoTablero
Tetris o-- Audio
TableroRender o-- Tablero
TableroRender o-- Pieza
TableroRender o-- Bloque
TableroRender o-- ColorPieza
TableroRender o-- FondoTablero
Tablero o-- Pieza
Tablero o-- Constantes
FondoTablero o-- Constantes
GameOverScreen o-- Ventana
Controles o-- Accion
TableroRender o-- Bloque
Tetris o-- Bloque

@enduml
